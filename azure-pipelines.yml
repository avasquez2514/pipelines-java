trigger:
- master  # Replace with your trigger (e.g., branch)

pool:
  vmImage: ubuntu-latest  # Adjust VM image as needed

stages:
- stage: BuildJava
  jobs:
  - job: BuildJob
    displayName: Build Java Function App with Maven
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Maven@3
      displayName: 'Maven build (app/pom.xml)'
      inputs:
        mavenPomFile: 'app/pom.xml'
        goals: 'package'  # Assuming 'package' is the goal for building
        codeCoverageToolOption: copertura
        # Add other Maven goals as needed (e.g., test)

- stage: Deploy
  dependsOn: BuildJava  # Ensures deployment happens after the build stage
  jobs:
  - job: DeployJob
    displayName: Deploy Function App to Azure
    condition: succeeded()  # Only deploy if the build stage succeeds
    steps:
    - task: ArchiveFiles@2
      displayName: 'Create ZIP archive'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'  # Adjust as needed
        includeRootFolder: false
        pattern: '/*/.jar'  # Include necessary JAR files
        archiveType: 'zip'
        archiveFileName: '$(Build.ArtifactStagingDirectory)/functionapp.zip'  # Custom zip name
    - task: AzureFunctionApp@2
      displayName: 'Deploy Function App to Azure'
      inputs:
        appType: 'functionApp'
        appName: '<your-function-app-name>'  # Replace with your app name
        package: '$(Build.ArtifactStagingDirectory)/functionapp.zip'
        deploymentMethod: 'auto'

- stage: PublishArtifacts  # Optional stage
  dependsOn: BuildJava  # Ensures publishing happens after the build stage
  jobs:
  - job: PublishArtifactsJob
    displayName: Publish Build Artifacts
    condition: succeededOrFailed()  # Publish regardless of build success/failure
    steps:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'